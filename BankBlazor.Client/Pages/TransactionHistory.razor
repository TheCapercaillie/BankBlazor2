@page "/transactions/{AccountId:int}/{CustomerId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="transaction-history">
    <h2>Transaction History for Account #@AccountId</h2>

    <button class="btn btn-primary" @onclick="ReturnToCustomer">Back to Customer</button>

    @if (transactions == null)
    {
        <p>Loading transactions...</p>
    }
    else if (!transactions.Any())
    {
        <p>No transactions found for this account.</p>
    }
    else
    {
        <table class="transaction-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tx in transactions)
                {
                    <tr>
                        <td>@tx.Date.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@tx.Type</td>
                        <td class="@(tx.Amount < 0 ? "negative" : "positive")">@tx.Amount.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code 
{
    [Parameter] public int AccountId { get; set; }
    [Parameter] public int CustomerId { get; set; }

    private List<TransactionDto>? transactions;

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        try
        {
            transactions = await Http.GetFromJsonAsync<List<TransactionDto>>($"api/bank/accounts/{AccountId}/transactions");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void ReturnToCustomer()
    {
        NavigationManager.NavigateTo($"/customer/{CustomerId}");
    }
}
